plugins {
    id 'com.android.library'
}

ext {
    PUBLISH_GROUP_ID = 'com.tom-roush'
    PUBLISH_ARTIFACT_ID = 'pdfbox-android'
    PUBLISH_VERSION = 'V2.0.13.4'
}

android {
    compileSdkVersion 31
    compileOptions.encoding = 'UTF-8'

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 31
        versionName "V2.0.13.4"
        versionCode 1
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "notAnnotation", "androidx.test.filters.FlakyTest"

        externalNativeBuild {
            cmake{
//                cppFlags "-std=c++11 -fshort-wchar"
                abiFilters "armeabi-v7a" ,"arm64-v8a"
            }
        }

    }
    externalNativeBuild {
        cmake {
//            ANDROID_STL 'APP_CPPFLAGS += -fshort-wchar'
            path "CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        test {
            resources.srcDirs = ['src/main/assets', 'src/test/resources']
        }
        androidTest {
            assets.srcDirs = ['src/test/resources']
        }
//        main {
//            jni.srcDirs = []
//            jniLibs.srcDirs = ['libs']
//        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // Rename the output aars
    android.libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName.endsWith('.aar')) {
                outputFileName = "pdfbox-android-${variant.name}-${defaultConfig.versionName}.aar"
            }
        }
    }
}

// Test output from https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    // Performance improvements for tests
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    reports.html.enabled = false
    reports.junitXml.enabled = false

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
        showExceptions true
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showStackTraces true

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

dependencies {
    api "org.bouncycastle:bcprov-jdk15to18:1.70"
    api "org.bouncycastle:bcpkix-jdk15to18:1.70"
    api "org.bouncycastle:bcutil-jdk15to18:1.70"

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.googlecode.java-diff-utils:diffutils:1.3.0'

    androidTestImplementation 'androidx.test:runner:1.4.0'

    implementation 'com.gemalto.jp2:jp2-android:1.0.3'


}

apply from: 'maven-publish.gradle'
